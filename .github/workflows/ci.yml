name: Rust CI

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [
          ubuntu-latest,
          macos-latest,
          windows-latest,
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Check for linter warnings
        run: cargo clippy --locked -- -D warnings

      - name: Run tests
        run: cargo test --locked --all-features --all-targets

  release:
    name: Release
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install musl target
        run: rustup target add x86_64-unknown-linux-musl
      - name: Build release binary
        run: cargo build --verbose --release --bin log-sender --target x86_64-unknown-linux-musl
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          files: target/x86_64-unknown-linux-musl/release/log-sender
          fail_on_unmatched_files: true
          generate_release_notes: true
